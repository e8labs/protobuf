// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmarks.proto

package com.google.protobuf.benchmarks;

public final class Benchmarks {
  private Benchmarks() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BenchmarkDatasetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:benchmarks.BenchmarkDataset)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the benchmark dataset.  This should be unique across all datasets.
     * Should only contain word characters: [a-zA-Z0-9_]
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the benchmark dataset.  This should be unique across all datasets.
     * Should only contain word characters: [a-zA-Z0-9_]
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Fully-qualified name of the protobuf message for this dataset.
     * It will be one of the messages defined benchmark_messages_proto2.proto
     * or benchmark_messages_proto3.proto.
     * Implementations that do not support reflection can implement this with
     * an explicit "if/else" chain that lists every known message defined
     * in those files.
     * </pre>
     *
     * <code>string message_name = 2;</code>
     */
    java.lang.String getMessageName();
    /**
     * <pre>
     * Fully-qualified name of the protobuf message for this dataset.
     * It will be one of the messages defined benchmark_messages_proto2.proto
     * or benchmark_messages_proto3.proto.
     * Implementations that do not support reflection can implement this with
     * an explicit "if/else" chain that lists every known message defined
     * in those files.
     * </pre>
     *
     * <code>string message_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getMessageNameBytes();

    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getPayloadList();
    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    int getPayloadCount();
    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    com.google.protobuf.ByteString getPayload(int index);
  }
  /**
   * Protobuf type {@code benchmarks.BenchmarkDataset}
   */
  public  static final class BenchmarkDataset extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:benchmarks.BenchmarkDataset)
      BenchmarkDatasetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BenchmarkDataset.newBuilder() to construct.
    private BenchmarkDataset(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BenchmarkDataset() {
      name_ = "";
      messageName_ = "";
      payload_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BenchmarkDataset(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              messageName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                payload_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              payload_.add(input.readBytes());
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          payload_ = java.util.Collections.unmodifiableList(payload_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.protobuf.benchmarks.Benchmarks.internal_static_benchmarks_BenchmarkDataset_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.protobuf.benchmarks.Benchmarks.internal_static_benchmarks_BenchmarkDataset_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.class, com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the benchmark dataset.  This should be unique across all datasets.
     * Should only contain word characters: [a-zA-Z0-9_]
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the benchmark dataset.  This should be unique across all datasets.
     * Should only contain word characters: [a-zA-Z0-9_]
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MESSAGE_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object messageName_;
    /**
     * <pre>
     * Fully-qualified name of the protobuf message for this dataset.
     * It will be one of the messages defined benchmark_messages_proto2.proto
     * or benchmark_messages_proto3.proto.
     * Implementations that do not support reflection can implement this with
     * an explicit "if/else" chain that lists every known message defined
     * in those files.
     * </pre>
     *
     * <code>string message_name = 2;</code>
     */
    public java.lang.String getMessageName() {
      java.lang.Object ref = messageName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        messageName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Fully-qualified name of the protobuf message for this dataset.
     * It will be one of the messages defined benchmark_messages_proto2.proto
     * or benchmark_messages_proto3.proto.
     * Implementations that do not support reflection can implement this with
     * an explicit "if/else" chain that lists every known message defined
     * in those files.
     * </pre>
     *
     * <code>string message_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMessageNameBytes() {
      java.lang.Object ref = messageName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        messageName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PAYLOAD_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> payload_;
    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getPayloadList() {
      return payload_;
    }
    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    public int getPayloadCount() {
      return payload_.size();
    }
    /**
     * <pre>
     * The payload(s) for this dataset.  They should be parsed or serialized
     * in sequence, in a loop, ie.
     *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
     *    for (i = 0; i &lt; benchmark.payload.length; i++) {
     *      parse(benchmark.payload[i])
     *    }
     *  }
     * This is intended to let datasets include a variety of data to provide
     * potentially more realistic results than just parsing the same message
     * over and over.  A single message parsed repeatedly could yield unusually
     * good branch prediction performance.
     * </pre>
     *
     * <code>repeated bytes payload = 3;</code>
     */
    public com.google.protobuf.ByteString getPayload(int index) {
      return payload_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!getMessageNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, messageName_);
      }
      for (int i = 0; i < payload_.size(); i++) {
        output.writeBytes(3, payload_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!getMessageNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, messageName_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < payload_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(payload_.get(i));
        }
        size += dataSize;
        size += 1 * getPayloadList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset)) {
        return super.equals(obj);
      }
      com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset other = (com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && getMessageName()
          .equals(other.getMessageName());
      result = result && getPayloadList()
          .equals(other.getPayloadList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + MESSAGE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getMessageName().hashCode();
      if (getPayloadCount() > 0) {
        hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
        hash = (53 * hash) + getPayloadList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code benchmarks.BenchmarkDataset}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:benchmarks.BenchmarkDataset)
        com.google.protobuf.benchmarks.Benchmarks.BenchmarkDatasetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.protobuf.benchmarks.Benchmarks.internal_static_benchmarks_BenchmarkDataset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.protobuf.benchmarks.Benchmarks.internal_static_benchmarks_BenchmarkDataset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.class, com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.Builder.class);
      }

      // Construct using com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        messageName_ = "";

        payload_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.protobuf.benchmarks.Benchmarks.internal_static_benchmarks_BenchmarkDataset_descriptor;
      }

      public com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset getDefaultInstanceForType() {
        return com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.getDefaultInstance();
      }

      public com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset build() {
        com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset buildPartial() {
        com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset result = new com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        result.messageName_ = messageName_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          payload_ = java.util.Collections.unmodifiableList(payload_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.payload_ = payload_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset) {
          return mergeFrom((com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset other) {
        if (other == com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getMessageName().isEmpty()) {
          messageName_ = other.messageName_;
          onChanged();
        }
        if (!other.payload_.isEmpty()) {
          if (payload_.isEmpty()) {
            payload_ = other.payload_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePayloadIsMutable();
            payload_.addAll(other.payload_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the benchmark dataset.  This should be unique across all datasets.
       * Should only contain word characters: [a-zA-Z0-9_]
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the benchmark dataset.  This should be unique across all datasets.
       * Should only contain word characters: [a-zA-Z0-9_]
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the benchmark dataset.  This should be unique across all datasets.
       * Should only contain word characters: [a-zA-Z0-9_]
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the benchmark dataset.  This should be unique across all datasets.
       * Should only contain word characters: [a-zA-Z0-9_]
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the benchmark dataset.  This should be unique across all datasets.
       * Should only contain word characters: [a-zA-Z0-9_]
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object messageName_ = "";
      /**
       * <pre>
       * Fully-qualified name of the protobuf message for this dataset.
       * It will be one of the messages defined benchmark_messages_proto2.proto
       * or benchmark_messages_proto3.proto.
       * Implementations that do not support reflection can implement this with
       * an explicit "if/else" chain that lists every known message defined
       * in those files.
       * </pre>
       *
       * <code>string message_name = 2;</code>
       */
      public java.lang.String getMessageName() {
        java.lang.Object ref = messageName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          messageName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Fully-qualified name of the protobuf message for this dataset.
       * It will be one of the messages defined benchmark_messages_proto2.proto
       * or benchmark_messages_proto3.proto.
       * Implementations that do not support reflection can implement this with
       * an explicit "if/else" chain that lists every known message defined
       * in those files.
       * </pre>
       *
       * <code>string message_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMessageNameBytes() {
        java.lang.Object ref = messageName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          messageName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Fully-qualified name of the protobuf message for this dataset.
       * It will be one of the messages defined benchmark_messages_proto2.proto
       * or benchmark_messages_proto3.proto.
       * Implementations that do not support reflection can implement this with
       * an explicit "if/else" chain that lists every known message defined
       * in those files.
       * </pre>
       *
       * <code>string message_name = 2;</code>
       */
      public Builder setMessageName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        messageName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully-qualified name of the protobuf message for this dataset.
       * It will be one of the messages defined benchmark_messages_proto2.proto
       * or benchmark_messages_proto3.proto.
       * Implementations that do not support reflection can implement this with
       * an explicit "if/else" chain that lists every known message defined
       * in those files.
       * </pre>
       *
       * <code>string message_name = 2;</code>
       */
      public Builder clearMessageName() {
        
        messageName_ = getDefaultInstance().getMessageName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully-qualified name of the protobuf message for this dataset.
       * It will be one of the messages defined benchmark_messages_proto2.proto
       * or benchmark_messages_proto3.proto.
       * Implementations that do not support reflection can implement this with
       * an explicit "if/else" chain that lists every known message defined
       * in those files.
       * </pre>
       *
       * <code>string message_name = 2;</code>
       */
      public Builder setMessageNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        messageName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> payload_ = java.util.Collections.emptyList();
      private void ensurePayloadIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          payload_ = new java.util.ArrayList<com.google.protobuf.ByteString>(payload_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getPayloadList() {
        return java.util.Collections.unmodifiableList(payload_);
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public int getPayloadCount() {
        return payload_.size();
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public com.google.protobuf.ByteString getPayload(int index) {
        return payload_.get(index);
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public Builder setPayload(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensurePayloadIsMutable();
        payload_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public Builder addPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensurePayloadIsMutable();
        payload_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public Builder addAllPayload(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensurePayloadIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, payload_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The payload(s) for this dataset.  They should be parsed or serialized
       * in sequence, in a loop, ie.
       *  while (!benchmarkDone) {  // Benchmark runner decides when to exit.
       *    for (i = 0; i &lt; benchmark.payload.length; i++) {
       *      parse(benchmark.payload[i])
       *    }
       *  }
       * This is intended to let datasets include a variety of data to provide
       * potentially more realistic results than just parsing the same message
       * over and over.  A single message parsed repeatedly could yield unusually
       * good branch prediction performance.
       * </pre>
       *
       * <code>repeated bytes payload = 3;</code>
       */
      public Builder clearPayload() {
        payload_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:benchmarks.BenchmarkDataset)
    }

    // @@protoc_insertion_point(class_scope:benchmarks.BenchmarkDataset)
    private static final com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset();
    }

    public static com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BenchmarkDataset>
        PARSER = new com.google.protobuf.AbstractParser<BenchmarkDataset>() {
      public BenchmarkDataset parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BenchmarkDataset(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BenchmarkDataset> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BenchmarkDataset> getParserForType() {
      return PARSER;
    }

    public com.google.protobuf.benchmarks.Benchmarks.BenchmarkDataset getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_benchmarks_BenchmarkDataset_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_benchmarks_BenchmarkDataset_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020benchmarks.proto\022\nbenchmarks\"G\n\020Benchm" +
      "arkDataset\022\014\n\004name\030\001 \001(\t\022\024\n\014message_name" +
      "\030\002 \001(\t\022\017\n\007payload\030\003 \003(\014B \n\036com.google.pr" +
      "otobuf.benchmarksb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_benchmarks_BenchmarkDataset_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_benchmarks_BenchmarkDataset_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_benchmarks_BenchmarkDataset_descriptor,
        new java.lang.String[] { "Name", "MessageName", "Payload", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
