// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmarks.proto

#ifndef PROTOBUF_benchmarks_2eproto_INCLUDED
#define PROTOBUF_benchmarks_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_benchmarks_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBenchmarkDatasetImpl();
void InitDefaultsBenchmarkDataset();
inline void InitDefaults() {
  InitDefaultsBenchmarkDataset();
}
}  // namespace protobuf_benchmarks_2eproto
namespace benchmarks {
class BenchmarkDataset;
class BenchmarkDatasetDefaultTypeInternal;
extern BenchmarkDatasetDefaultTypeInternal _BenchmarkDataset_default_instance_;
}  // namespace benchmarks
namespace google {
namespace protobuf {
template<> ::benchmarks::BenchmarkDataset* Arena::Create< ::benchmarks::BenchmarkDataset>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace benchmarks {

// ===================================================================

class BenchmarkDataset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:benchmarks.BenchmarkDataset) */ {
 public:
  BenchmarkDataset();
  virtual ~BenchmarkDataset();

  BenchmarkDataset(const BenchmarkDataset& from);

  inline BenchmarkDataset& operator=(const BenchmarkDataset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BenchmarkDataset(BenchmarkDataset&& from) noexcept
    : BenchmarkDataset() {
    *this = ::std::move(from);
  }

  inline BenchmarkDataset& operator=(BenchmarkDataset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BenchmarkDataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BenchmarkDataset* internal_default_instance() {
    return reinterpret_cast<const BenchmarkDataset*>(
               &_BenchmarkDataset_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BenchmarkDataset* other);
  friend void swap(BenchmarkDataset& a, BenchmarkDataset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BenchmarkDataset* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BenchmarkDataset>(NULL);
  }

  BenchmarkDataset* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BenchmarkDataset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BenchmarkDataset& from);
  void MergeFrom(const BenchmarkDataset& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BenchmarkDataset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes payload = 3;
  int payload_size() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload(int index) const;
  ::std::string* mutable_payload(int index);
  void set_payload(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_payload(int index, ::std::string&& value);
  #endif
  void set_payload(int index, const char* value);
  void set_payload(int index, const void* value, size_t size);
  ::std::string* add_payload();
  void add_payload(const ::std::string& value);
  #if LANG_CXX11
  void add_payload(::std::string&& value);
  #endif
  void add_payload(const char* value);
  void add_payload(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& payload() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_payload();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string message_name = 2;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 2;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  #if LANG_CXX11
  void set_message_name(::std::string&& value);
  #endif
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // @@protoc_insertion_point(class_scope:benchmarks.BenchmarkDataset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> payload_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_benchmarks_2eproto::TableStruct;
  friend void ::protobuf_benchmarks_2eproto::InitDefaultsBenchmarkDatasetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BenchmarkDataset

// string name = 1;
inline void BenchmarkDataset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BenchmarkDataset::name() const {
  // @@protoc_insertion_point(field_get:benchmarks.BenchmarkDataset.name)
  return name_.GetNoArena();
}
inline void BenchmarkDataset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:benchmarks.BenchmarkDataset.name)
}
#if LANG_CXX11
inline void BenchmarkDataset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:benchmarks.BenchmarkDataset.name)
}
#endif
inline void BenchmarkDataset::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:benchmarks.BenchmarkDataset.name)
}
inline void BenchmarkDataset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:benchmarks.BenchmarkDataset.name)
}
inline ::std::string* BenchmarkDataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:benchmarks.BenchmarkDataset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BenchmarkDataset::release_name() {
  // @@protoc_insertion_point(field_release:benchmarks.BenchmarkDataset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkDataset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:benchmarks.BenchmarkDataset.name)
}

// string message_name = 2;
inline void BenchmarkDataset::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BenchmarkDataset::message_name() const {
  // @@protoc_insertion_point(field_get:benchmarks.BenchmarkDataset.message_name)
  return message_name_.GetNoArena();
}
inline void BenchmarkDataset::set_message_name(const ::std::string& value) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:benchmarks.BenchmarkDataset.message_name)
}
#if LANG_CXX11
inline void BenchmarkDataset::set_message_name(::std::string&& value) {
  
  message_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:benchmarks.BenchmarkDataset.message_name)
}
#endif
inline void BenchmarkDataset::set_message_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:benchmarks.BenchmarkDataset.message_name)
}
inline void BenchmarkDataset::set_message_name(const char* value, size_t size) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:benchmarks.BenchmarkDataset.message_name)
}
inline ::std::string* BenchmarkDataset::mutable_message_name() {
  
  // @@protoc_insertion_point(field_mutable:benchmarks.BenchmarkDataset.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BenchmarkDataset::release_message_name() {
  // @@protoc_insertion_point(field_release:benchmarks.BenchmarkDataset.message_name)
  
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkDataset::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    
  } else {
    
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:benchmarks.BenchmarkDataset.message_name)
}

// repeated bytes payload = 3;
inline int BenchmarkDataset::payload_size() const {
  return payload_.size();
}
inline void BenchmarkDataset::clear_payload() {
  payload_.Clear();
}
inline const ::std::string& BenchmarkDataset::payload(int index) const {
  // @@protoc_insertion_point(field_get:benchmarks.BenchmarkDataset.payload)
  return payload_.Get(index);
}
inline ::std::string* BenchmarkDataset::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:benchmarks.BenchmarkDataset.payload)
  return payload_.Mutable(index);
}
inline void BenchmarkDataset::set_payload(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:benchmarks.BenchmarkDataset.payload)
  payload_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BenchmarkDataset::set_payload(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:benchmarks.BenchmarkDataset.payload)
  payload_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BenchmarkDataset::set_payload(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  payload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:benchmarks.BenchmarkDataset.payload)
}
inline void BenchmarkDataset::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:benchmarks.BenchmarkDataset.payload)
}
inline ::std::string* BenchmarkDataset::add_payload() {
  // @@protoc_insertion_point(field_add_mutable:benchmarks.BenchmarkDataset.payload)
  return payload_.Add();
}
inline void BenchmarkDataset::add_payload(const ::std::string& value) {
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:benchmarks.BenchmarkDataset.payload)
}
#if LANG_CXX11
inline void BenchmarkDataset::add_payload(::std::string&& value) {
  payload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:benchmarks.BenchmarkDataset.payload)
}
#endif
inline void BenchmarkDataset::add_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  payload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:benchmarks.BenchmarkDataset.payload)
}
inline void BenchmarkDataset::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:benchmarks.BenchmarkDataset.payload)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BenchmarkDataset::payload() const {
  // @@protoc_insertion_point(field_list:benchmarks.BenchmarkDataset.payload)
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BenchmarkDataset::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:benchmarks.BenchmarkDataset.payload)
  return &payload_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace benchmarks

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_benchmarks_2eproto_INCLUDED
